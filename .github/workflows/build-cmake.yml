# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build for x64

on:
  workflow_dispatch:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang

            # currently ubuntu is not supported because 23.04+ is required.

    steps:
    - uses: actions/checkout@v3

    - name: Setup dependencies
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt install autoconf build-essential catch2 cmake git glslang-tools libasound2 libavcodec-dev libavfilter-dev libboost-context-dev libfmt-dev libglu1-mesa-dev libhidapi-dev liblz4-dev libmbedtls-dev libpulse-dev libssl-dev libswscale-dev libtool libudev-dev libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-xkb1 libxext-dev libxkbcommon-x11-0 libzstd-dev mesa-common-dev nasm ninja-build nlohmann-json3-dev qt6-base-dev qt6-base-private-dev qt6-multimedia-dev qt6-webengine-dev
         elif [ "$RUNNER_OS" == "Windows" ]; then
              curl -OL https://github.com/KhronosGroup/glslang/releases/download/main-tot/glslang-master-windows-Release.zip && 
              unzip glslang-master-windows-Release.zip -d "D:/glslang" && 
              ls "D:/glslang" && 
              echo "D:/glslang/bin" >> $GITHUB_PATH
         else
              echo "$RUNNER_OS not supported"
              exit 1
         fi
        
    - name: Get source from GitHub
      run: git clone --recursive https://github.com/suyu-emu/suyu ./suyu && mkdir ./suyu/build

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/suyu/build" >> "$GITHUB_OUTPUT" && 
        echo "output-filename=release-${{ matrix.os }}.zip" >> "$GITHUB_OUTPUT" && 
        echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT" && 
        echo "utc-time=$(date +'%s')" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        echo $env:path && 
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}/suyu

    - name: Build source
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Package release
      uses: thedoctor0/zip-release@0.7.5
      id: package
      with:
        type: 'zip'
        filename: '${{ steps.strings.outputs.output-filename }}'
        directory: '${{ github.workspace }}'
        path: '${{ steps.strings.outputs.build-output-dir }}/build/bin/${{ matrix.build_type }}'
        exclusions: '*.git* /*node_modules/* .editorconfig'

    - name: Release build
      uses: softprops/action-gh-release@v2
      with:
        name: 'New Build - ${{ steps.strings.outputs.date }}'
        tag_name: 'b_${{ steps.strings.outputs.utc-time }}'
        make_latest: true
        body: 'Built on ${{ steps.strings.outputs.date }}. As a reminder, this build is UNTESTED and is NOT SUPPORTED by the official devs. No support will be given. Do not run untrusted binaries on your computer.'
        files: '${{ github.workspace }}/${{ steps.strings.outputs.output-filename }}'
        fail_on_unmatched_files: true
        
    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}
